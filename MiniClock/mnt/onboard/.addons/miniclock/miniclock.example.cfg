# -------------------------------------------------------------------
#   MiniClock config example file. For settings to take any effect,
#     copy or rename this file to .addons/miniclock/miniclock.cfg
# -------------------------------------------------------------------

#
# To uninstall, set to 1
#
uninstall=0

#
# To debug, set to 1 (will create .addons/miniclock/debuglog.txt)
## See also {debug} in format string below.
#
debug=0

#
# which /dev/input/eventX number devices to listen to
#
## input_devices=1    - event1 = touchscreen
## input_devices=0    - event0 = keyboard/buttons/magnet
## input_devices=1 0  - event1 event0 = both of the above
## ^NOTE: event0 requires the libnickel "Don't grab exclusive access to event0" patch from kobopatch,
##        otherwise, MiniClock won't actually be able to listen to it.
#
input_devices=1

#
# whitelist of accepted events that should update MiniClock
#
## ABS:MT_POSITION_X/Y: touchscreen coordinates
## KEY:F23/F24: Forma/Libra page turn buttons
## KEY:POWER: going into standby manually
## ABS:X/Y: touchscreen coordinates (older, non-multitouch devices)
#
whitelist=ABS:MT_POSITION_X ABS:MT_POSITION_Y KEY:F23 KEY:F24 KEY:POWER ABS:X ABS:Y
#
## graylist of ignored events that won't trip the cooldown
## MSC:RAW: orientation changes (gyro)
## To disable it, leave uncommented, but empty.
graylist=MSC:RAW

#
# cooldown=num time
#
## after receiving <num> unrecognized events in a row,
## stop listening to all input for <time> seconds.
## (helps avoid power consumption during standby)
#
cooldown=5 30

#
# Delay: (update delay 1 second repeat 3 times)
## NOTE: Supports decimal values.
##       With aggressive_timing set to 0 (the default), you might want to keep the *first* delay relatively "high",
##       though, especially if you read ePubs, and not KePubs.
##       If you often catch a clock update happening between an input event and the actual page-turn, do up the first delay.
##       On the other hand, with aggressive_timing set to 1, you can probably afford to try something fancier and more aggressive,
##       like delay=0.25 0.5 1

#
delay=1 1 1

#
# Repeat: (deprecated setting, use multiple delay instead)
#
## repeat=3
#

#
# Date format string ( see 'man strftime' )
#
## In addition may also use {month}, {day}, {battery}.
## (Look for battery and locale settings further below).
#
## {debug} will show the event that caused the update
#
format=%a %b %d %H:%M

#
# Where to print the clock
#
column=0
row=0
## ^NOTE: Can be negative (f.g., row -1 is the last line of the screen (bottom), column -1 is the last column on the screen (right)).
offset_x=0
offset_y=0
## ^NOTE: These do *NOT* override row/column, they *fine-tune* them. Offsets can be negative, but will not wrap around edges.
##       f.g., if you only print a %H:%M timestamp, that's 5 characters, so, the bottom-right corner of the screen would be:
##       column=-5
##       row=-1
##       You can then adjust that a bit, by, say, moving it 10 pixels higher:
##       offset_y=-10
##  NOTE: While column/row won't, offset_x/offset_y *can* push content off-screen!

#
# Font:  (IBM, UNSCII, ALT, THIN, FANTASY, MCR, TALL, BLOCK,
#         LEGGIE, VEGGIE, KATES, FKP, CTRLD, ORP, ORPB, ORPI,
#         SCIENTIFICA, SCIENTIFICAB, SCIENTIFICAI, TERMINUS,
#         TERMINUSB, FATTY, SPLEEN, TEWI, TEWIB, TOPAZ,
#         MICROKNIGHT, VGA)
#
font=IBM

#
# Font Size:
#
size=0

#
# Color: (BLACK GRAY{1-9A-E} WHITE)
#
fg_color=BLACK
bg_color=WHITE
#
## Don't render background pixels *at all* (i.e., no background "box").
## Set to 1 to enable.
backgroundless=0
## Ignores the specified foreground color, and instead use the inverse of what's on the screen.
## (f.g., if a pixel replaces a white pixel, it'll be painted black).
## Like with backgroundless, background pixels won't be rendered. Takes precedence over backgroundless.
## Set to 1 to enable.
overlay=0

#
# TrueType support:
#
## For fonts inside the MiniClock directory:
##     truetype=yourfont.ttf
#
## For fonts stored elsewhere in the filesystem:
##     truetype=/mnt/onboard/fonts/something.ttf
#
## Only set these if you use *italic*, **bold**, ***bold italic*** in your format string:
##
##     truetype_format=*%a* **%b** ***%d*** %H:%M
##     truetype_bold=yourfont-bold.ttf
##     truetype_italic=yourfont-italic.ttf
##     truetype_bolditalic=yourfont-bolditalic.ttf
#
## Technically, this can also be used for completely different font styles,
## instead of italic or bold variants of the same font.
#
## NOTE: Will fall back to regular mode when font file is unavailable.
##       (e.g. while the device is connected to USB)
#
truetype_size=16.0
truetype_px=0
## ^NOTE: size is in pt, px is in pixels. If set to non-zero, px takes precedence.
##        In case you ever need to do the maths yourself, px = dpi / 72.0 * pt
truetype_x=0
truetype_y=0
## ^NOTE: Much like above, these can be negative, in which case they count backwards from the opposite edge (like column/row).
##        f.g., a rough match to the column/row example above might be:
##        truetype_x=-115
##        truetype_y=-44
truetype_fg=BLACK
truetype_bg=WHITE

#
# TrueType padding
#
## TrueType padding helps prevent visual fragments to appear,
## in the extremely rare instance of multiple clock updates on the same page,
## but it comes at the cost of adding extra whitespace.
## Set to 1 to enable.
## NOTE: If you still have this enabled, and you're seeing weird layout issues on the first update after a truetype switch,
##       try disabling it.
#
truetype_padding=0

#
# NightMode support:
#
check_nightmode=1
## ^NOTE: Set this to 0 if you won't ever use nightmode, to be able to skip the check entirely.
#
## For the current FW functionality:
nightmode_file=/mnt/onboard/.kobo/Kobo/Kobo eReader.conf
nightmode_key=InvertScreen
nightmode_value=true
## For the legacy NightMode hack:
#nightmode_file=/mnt/onboard/.kobo/nightmode.ini
#nightmode_key=invertActive
#nightmode_value=yes

#
# Battery percentage value (0-100%)
#
## Use {battery} in the format string.
#
## Will only be used if the battery is between min max.
## Default: only shown when battery level drops to 50% and under.
battery_min=0
battery_max=50
# battery_source=/sys/devices/platform/pmic_battery.1/power_supply/mc13892_bat/capacity

#
# Localization (translate Month and Day names)
#
## Set day names, Monday -> Sunday (7 words)
## Use {day} in the format string to use this.
#
#days=Mon Tue Wed Thu Fri Sat Sun
#
## Set month names, January -> December (12 words)
## Use {month} in the format string to use this.
#
#months=Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
#

#
# Frontlight percentage value (0-100 or ??)
#
## Use {frontlight} in the format string.
## ^NOTE: It might take a couple pages to sync up. That's perfectly normal.
#

#
# More aggressive timing
#
## If this is set to 1, MiniClock will attempt to display itself sooner.
## This may be race-y, and is known to "break" (as in, update *too early*, meaning Nickel's own refresh will overwrite us):
## * With the ePub reader (both because it's too slow, and because of a quirk of its implementation/interaction within Nickel)
##   (On that front, things should be somewhat less worse on FW 4.20+).
## * When navigating the Library via the on-screen buttons if your clock happens to be positioned on top of one of those buttons.
## * Probably a whole host of other things.
## NOTE: That said, it *does* behave properly when reading a KePub,
##       in which case it'll try to display the clock much "closer" to the actual page-turn.
#
aggressive_timing=0
#
