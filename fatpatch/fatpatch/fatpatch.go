package main

import (
	"fmt"
	"os"
	"syscall"
)

func panic(err error) {
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
}

func main() {
	fmt.Println("fatpatch windows version 0 alpha (2016-Aug-10)")
	fmt.Println("USE AT YOUR OWN RISK")
	fmt.Println("")

	if len(os.Args) != 2 {
		fmt.Println("Please provide a single argument to", os.Args[0])
		fmt.Println("    ", "Example 1:", os.Args[0], "X:")
		fmt.Println("    ", "Example 2:", os.Args[0], "PhysicalDrive9")
		fmt.Println(os.Args[0], "will ask for confirmation before performing any changes.")
		fmt.Println("Administrator permissions are required for low level disk access.")
		os.Exit(1)
	}

	disk, err := os.OpenFile(fmt.Sprintf("\\\\.\\%s", os.Args[1]), syscall.O_RDWR, 0777)
	panic(err)

	raw := make([]byte, 4096)
	n, err := disk.ReadAt(raw, 0)
	panic(err)

	if n != 4096 {
		fmt.Println("Could not read first sector of this device. Giving up.")
		os.Exit(1)
	}

	matches := 0

	for sector := 0; sector < 8; sector++ {
		if string(raw[sector*512+0x52:sector*512+0x52+8]) == "FAT32   " {
			matches++
			fmt.Println("FAT32 found at sector", sector,
				"LABEL", string(raw[sector*512+0x47:sector*512+0x47+11]))
		}
	}

	fmt.Println("")

	if matches == 0 {
		fmt.Println("This device does not seem to be FAT32. Giving up.")
		os.Exit(1)
	}

	fmt.Println("Perform changes? (type _uppercase_ yes)")
	var response string
	_, err = fmt.Scanln(&response)

	if err != nil || response != "YES" {
		fmt.Println("Operation cancelled. Expected YES, got", response)
		panic(err)
		os.Exit(1)
	}

	fmt.Println("")

	patch := []byte{
		0x0e, 0x1f, 0xbe, 0x77, 0x7c, 0xac, 0x22, 0xc0, 0x74, 0x0b, 0x56, 0xb4, 0x0e, 0xbb, 0x07, 0x00,
		0xcd, 0x10, 0x5e, 0xeb, 0xf0, 0x32, 0xe4, 0xcd, 0x16, 0xcd, 0x19, 0xeb, 0xfe, 0x54, 0x68, 0x69,
		0x73, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x62, 0x6f, 0x6f, 0x74, 0x61,
		0x62, 0x6c, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x20, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73,
		0x65, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x61, 0x20, 0x62, 0x6f, 0x6f, 0x74, 0x61,
		0x62, 0x6c, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x70, 0x70, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x0d, 0x0a,
		0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f,
		0x20, 0x74, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x0d,
		0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x0d, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xff, 0x0d,
		0x0a, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74,
		0x6f, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8d,
		0xef, 0x02, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x01,
		0xb9, 0x01, 0x00, 0x00,
	}

	// reread as things might have changed in between
	n, err = disk.ReadAt(raw, 0)
	panic(err)

	if n != 4096 {
		fmt.Println("Could not read first sector of this device. Giving up.")
		os.Exit(1)
	}

	matches = 0

	for sector := 0; sector < 8; sector++ {
		if string(raw[sector*512+0x52:sector*512+0x52+8]) == "FAT32   " {
			matches++
			copy(raw[sector*512+0x5a:], patch)
			fmt.Println("Performing changes to sector", sector)
		}
	}
	fmt.Println("")

	n, err = disk.WriteAt(raw, 0)
	panic(err)

	if n != 4096 {
		fmt.Println("Error writing", n, "bytes.")
		os.Exit(1)
	}

	fmt.Println("Done.")
}
